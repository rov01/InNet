angular.module("InNet",["ui.router","ui.bootstrap","timer","angular-storage","angular-jwt","leaflet-directive","angular.filter"]),angular.module("InNet").service("BranchSvc",["$http",function(e){this.fetch=function(t){return e.get("/api/branch?corps="+t)},this.fetchByName=function(t){return e.get("/api/branch/name?branch="+t)},this.totalListFindByName=function(t){return e.get("/api/branch/name/total?branch="+t)},this.getDetails=function(t){return e.get("/api/branch/"+t)},this.update=function(t){return e.put("/api/branch/"+t.branch,t)},this.updateDirector=function(t){return e.put("/api/branch?branch="+t.branch,t)}}]),angular.module("InNet").service("CarSvc",["$http",function(e){this.fetch=function(){return e.get("/api/cars")},this.findByBranch=function(t){return e.get("/api/cars/"+t)},this.update=function(t){return e.put("/api/cars/"+t.id,t)}}]),angular.module("InNet").controller("CaseCtrl",["$scope","$stateParams","$modal","CaseSvc","$log","SocketSvc","UserSvc",function(e,t,s,n,r,i,a){e.maxSize=5,e.bigTotalItems=175,e.bigCurrentPage=1,n.fetch(a.userCorps()).success(function(t){e.cases=t}),i.on("newCase",function(t){e.cases.unshift(t)}),i.on("caseModified",function(t){e.cases[t.caseId-1]=t}),e.choose=function(t){n.findById(e.cases[t]._id).success(function(t){e.caseDetails=t})},e.addNewCase=function(){var t=s.open({templateUrl:"views/case/case.modal.html",controller:"CaseModalCtrl",size:"lg",resolve:{caseId:function(){return _.isEmpty(e.cases)?0:e.cases[0].caseId},caseDetails:function(){return{}}}});t.result.then(function(e){console.log(e)},function(){r.info("Modal dismissed at: "+new Date)})},e.editCase=function(t){s.open({templateUrl:"views/case/case.modal.html",controller:"CaseModalCtrl",size:"lg",resolve:{caseId:function(){return t},caseDetails:function(){return e.caseDetails}}})}}]),angular.module("InNet").controller("CaseModalCtrl",["$scope","CarSvc","$modalInstance","CaseSvc","$state","caseId","caseDetails","StSvc","$window","BranchSvc","UserSvc",function(e,t,s,n,r,i,a,c,o,u,l){function m(e){var t=[],s=[],n=[];if(e.cars){for(var r=e.cars.length-1;r>=0;r--)t.push(e.cars[r].radioCode),s.push(e.cars[r]._id),n.push(e.cars[r].branch);return{dispatchList:t,carIds:s,branches:n}}return{}}function d(t){for(var s=_.unique(t),n=[],r=0;r<e.branches.length;r++)s.indexOf(e.branches[r].name)>-1&&n.push(e.branches[r]._id);return n}if(_.isEmpty(a))e.isNew=!0,f=[];else{e.isNew=!1;var f=a.cars}u.fetch(l.userCorps()).success(function(t){e.branches=t}),e.caseObj={address:a.address||null,phone:a.phone||null,type:a.type||"火警",types:["火警","救護","災害","檢舉","其他"],carIds:m(a).carIds||[],dispatchList:m(a).dispatchList||[],branches:m(a).branches||[]},e.dispatchList=e.caseObj.dispatchList.join(" "),e.getCars=function(s){t.findByBranch(s.name).success(function(t){for(var s=t.length-1;s>=0;s--)e.caseObj.carIds.indexOf(t[s]._id)>-1&&(t[s].isChecked=!0);e.cars=t})},e.cancel=function(){s.dismiss("cancel")},e.cancelDispatch=function(t){t.isChecked=!1,f.splice(f.indexOf(t),1),e.caseObj.carIds.splice(e.caseObj.dispatchList.indexOf(t._id),1),e.caseObj.dispatchList.splice(e.caseObj.dispatchList.indexOf(t.radioCode),1),e.caseObj.branches.splice(e.caseObj.dispatchList.indexOf(t.branch),1),e.dispatchList=e.caseObj.dispatchList.join(" ")},e.dispatch=function(t){t.isChecked=!0,f.push(t),e.caseObj.carIds.push(t._id),e.caseObj.dispatchList.push(t.radioCode),e.caseObj.branches.push(t.branch),e.dispatchList=e.caseObj.dispatchList.join(" ")},e.closeCase=function(){c.count(a._id).success(function(e){e>0?o.alert("尚有隊員在安全管制"):(n.closeCase({id:a._id,isOngoing:!1}).success(function(e){console.log(e)}),s.dismiss("cancel"),r.reload())})},e.save=function(){n.create({caseId:i+1,address:e.caseObj.address||"測試",officerReceiver:l.currentUser()||"劉曉曼",type:e.caseObj.type||"救護",phone:e.caseObj.phone||"測試",branches:_.unique(e.caseObj.branches),branchIds:d(e.caseObj.branches),cars:e.caseObj.carIds,isOngoing:!0,corps:l.userCorps()}).success(function(e){s.close(e)})},e.update=function(){var t={id:a._id,caseId:i,address:e.caseObj.address,officerReceiver:l.currentUser()||"劉曉曼",type:e.caseObj.type,phone:e.caseObj.phone,branches:_.unique(e.caseObj.branches),branchIds:d(e.caseObj.branches),cars:e.caseObj.carIds,isOngoing:!0};n.update(t),s.dismiss("cancel")}}]),angular.module("InNet").service("CaseSvc",["$http",function(e){this.fetch=function(t){return e.get("/api/cases?corps="+t)},this.fetchAll=function(){return e.get("/api/cases/details")},this.fetchRelativeCase=function(t){return e.get("/api/cases/branch?branch="+t)},this.fetchDetails=function(t){return e.get("/api/cases/details/"+t)},this.findById=function(t){return e.get("/api/cases/"+t)},this.create=function(t){return e.post("/api/cases",t)},this.update=function(t){return e.put("/api/cases/"+t.id,t)},this["delete"]=function(t){return e.post("/api/cases/"+t)},this.closeCase=function(t){return e.put("/api/cases/close?id="+t.id,t)}}]),angular.module("InNet").controller("DashboardCtrl",["$scope","$location","SocketSvc","UserSvc","BranchSvc",function(e,t,s,n,r){r.fetch(n.userCorps()).success(function(t){e.branches=t}),n.fetchOnlineUser().success(function(t){e.users=t}),s.on("userLogin",function(t){e.users.push(t)}),s.on("userDisconnect",function(t){e.users=e.users.filter(function(e){return e.username!=t.username})}),s.on("userLogout",function(t){e.users=e.users.filter(function(e){return e.username!=t.username})}),e.$on("$destroy",function(e){s.removeAllListeners()})}]),angular.module("InNet").directive("minimalizaSidebar",["$timeout",function(e){return{restrict:"A",template:'<a class="navbar-minimalize minimalize-styl-2 btn btn-primary" href="" ng-click="minimalize()"><i class="fa fa-bars"></i></a>',controller:["$scope","$element",function(e,t){e.minimalize=function(){$("body").toggleClass("mini-navbar"),!$("body").hasClass("mini-navbar")||$("body").hasClass("body-small")?($("#side-menu").hide(),setTimeout(function(){$("#side-menu").fadeIn(500)},100)):$("body").hasClass("fixed-sidebar")?($("#side-menu").hide(),setTimeout(function(){$("#side-menu").fadeIn(500)},300)):$("#side-menu").removeAttr("style")}}]}}]).directive("sideNavigation",["$timeout",function(e){return{restrict:"A",link:function(t,s){e(function(){s.metisMenu()})}}}]).directive("iboxTools",["$timeout",function(e){return{restrict:"A",scope:!0,templateUrl:"views/common/ibox_tools.html",controller:["$scope","$element",function(t,s){t.showhide=function(){var t=s.closest("div.ibox"),n=s.find("i:first"),r=t.find("div.ibox-content");r.slideToggle(200),n.toggleClass("fa-chevron-up").toggleClass("fa-chevron-down"),t.toggleClass("").toggleClass("border-bottom"),e(function(){t.resize(),t.find("[id^=map-]").resize()},50)},t.closebox=function(){var e=s.closest("div.ibox");e.remove()}}]}}]).directive("back",["$window",function(e){return{restrict:"A",link:function(t,s,n){s.bind("click",function(){e.history.back()})}}}]),angular.module("InNet").controller("DispatchCtrl",["$scope","$stateParams","$modal","CaseSvc","BranchSvc","CarSvc","UserSvc",function(e,t,s,n,r,i,a){n.fetch(a.userCorps()).success(function(s){e.cases=s,n.findById(e.cases[t.caseId]._id).success(function(t){e.caseDetails=t})}),r.fetch(a.userCorps()).success(function(t){e.branchList=t}),i.fetch().success(function(t){e.carsData=t}),e.addNewCase=function(){s.open({templateUrl:"/partials/casePanel/caseAddModal",controller:"CaseAddModalCtrl",size:"lg",resolve:{caseId:function(){return e.id="新增案件"},branchList:function(){return e.branchList},carsData:function(){return e.carsData},isNew:function(){return!0},caseDetails:function(){return{}}}})},e.editCase=function(){s.open({templateUrl:"/partials/casePanel/caseAddModal",controller:"CaseAddModalCtrl",size:"lg",resolve:{caseId:function(){return e.id=e.cases[t.caseId].caseId},branchList:function(){return e.branchList},carsData:function(){for(var t=e.carsData.length-1;t>=0;t--)for(var s=e.caseDetails.cars.length-1;s>=0;s--)e.carsData[t].radioCode===e.caseDetails.cars[s].radio_code&&(e.carsData[t].isChecked=!0);return e.carsData},isNew:function(){return!1},caseDetails:function(){return e.caseDetails}}})}}]),angular.module("InNet").controller("DutyListCtrl",["$scope","BranchSvc","$stateParams","SocketSvc","UserSvc","$q",function(e,t,s,n,r,i){function a(e){for(var t=0,s=0;s<e.members.length;s++)e.members[s].onDuty&&(t+=1);return t}if(r.accessLevel()<2)var c=r.userBranch();else var c=s.branch;t.totalListFindByName(c).success(function(t){console.log(t),e.branch=t,e.onDutyTotal=a(e.branch)})}]),angular.module("InNet").controller("DutyListEditCtrl",["$scope","BranchSvc","$stateParams","MemberSvc","$location","$window","UserSvc",function(e,t,s,n,r,i,a){if(a.accessLevel()<2)var c=a.userBranch();else var c=s.branch;t.totalListFindByName(c).success(function(t){e.branch=t,e.onDutyTotal=0}),e.check=function(e){e.onDuty=!e.onDuty},e.save=function(){t.updateDirector({branch:e.branch.name,director:e.branch.director}).success(function(){for(var t=0;t<e.branch.members.length;t++)n.updateByMemberId({name:e.branch.members[t].name,title:e.branch.members[t].title,memberId:e.branch.members[t]._id,onDuty:e.branch.members[t].onDuty,mission:e.branch.members[t].mission})}).then(function(){i.history.back()})}}]),angular.module("InNet").service("GeoSvc",["$q",function(e){this.getGeolocationCoordinates=function(){var t=e.defer();return navigator.geolocation.getCurrentPosition(function(e){t.resolve(e.coords)},function(e){t.resolve(null)}),t.promise}}]),angular.module("InNet").controller("LoginCtrl",["$scope","UserSvc","store","$state","jwtHelper","$http","SocketSvc",function(e,t,s,n,r,i,a){var c=null;e.user={},e.login=function(){t.login(e.user).success(function(e){e.success?(s.set("jwt",e.token),i.defaults.headers.common["x-access-token"]=e.token,c=e.token):console.log("password is not existed!")}).then(function(){a.init(c),a.emit("login")}).then(function(){n.go("admin"==r.decodeToken(c).role?"dutyDesk.dashboard":"director.safety.index")})}}]),angular.module("InNet").controller("MapIndexCtrl",["$scope","leafletData","GeoSvc",function(e,t,s){s.getGeolocationCoordinates().then(function(t){e.nowPos.lat=t.latitude,e.nowPos.lng=t.longitude,e.nowPos.zoom=17}),angular.extend(e,{nowPos:{lat:24.988,lng:121.5752,zoom:17},controls:{draw:{}}}),t.getMap().then(function(t){var s=e.controls.edit.featureGroup;t.on("draw:created",function(e){var t=e.layer;s.addLayer(t),FeatureCollections.push(t.toGeoJSON())})})}]),angular.module("InNet").controller("MemberCtrl",["$scope","MemberSvc","$stateParams",function(e,t,s){e.branch=s.branch,t.findByBranch(s.branch).success(function(t){e.members=t})}]),angular.module("InNet").controller("MemberEditCtrl",["$scope","MemberSvc","BranchSvc","$stateParams","$window","$modal",function(e,t,s,n,r,i){e.isDeleted=!1,t.findByBranch(n.branch).success(function(t){e.members=t}),e.save=function(){for(var t=[],i=[],a=0;a<e.members.length;a++)t.push(e.members[a]._id),i.push(e.members[a].name),("分隊長"==e.members[a].title||"小隊長"==e.members[a].title||"中隊長"==e.members[a].title||"大隊長"==e.members[a].title)&&(director=e.members[a].name);s.update({branch:n.branch,members:t,directors:i,director:director}),r.history.back()},e.addNewMember=function(){i.open({templateUrl:"views/member/member.modal.html",controller:"MemberModalCtrl",size:"md",resolve:{branch:function(){return n.branch},member:function(){return{}}}})},e.update=function(e){i.open({templateUrl:"views/member/member.modal.html",controller:"MemberModalCtrl",size:"md",resolve:{branch:function(){return n.branch},member:function(){return e}}})},e["delete"]=function(){e.isDeleted=!0}}]),angular.module("InNet").controller("MemberModalCtrl",["$scope","branch","MemberSvc","$modalInstance","$state","member","BranchSvc",function(e,t,s,n,r,i,a){e.isNew=_.isEmpty(i),a.fetch(UserSvc.userCorps()).success(function(t){e.branches=t}).then(function(){for(var s=[],n=0;n<e.branches.length;n++)s.push(e.branches[n].name);e.member={name:i.name||"新進人員",title:i.title,titles:["隊員","小隊長","分隊長","中隊長","大隊長","副大隊長"],branch:t,branches:s,corp:"第一救災救護大隊",corps:["第一救災救護大隊"]}}),e.save=function(){s.create({onDuty:"true",id:"",name:e.member.name||"王小明",corp:e.member.corp,branch:e.member.branch,title:e.member.title,isChecked:"false",mission:"瞄子手",missions:["瞄子手","副瞄子手","司機","帶隊官","安全管制員","聯絡官"]}),n.dismiss("cancel"),r.reload()},e.update=function(){s.updateByMemberId({memberId:i._id,id:"",name:e.member.name,corp:e.member.corp,branch:e.member.branch,title:e.member.title,mission:"瞄子手",missions:["瞄子手","副瞄子手","司機","帶隊官","安全管制員","聯絡官"]}),n.dismiss("cancel"),r.reload()},e.cancel=function(){n.dismiss("cancel")}}]),angular.module("InNet").service("MemberSvc",["$http",function(e){this.fetch=function(){return e.get("/api/members")},this.findByBranch=function(t){return e.get("/api/members/"+t)},this.fetchOnDuty=function(t){return e.get("/api/members/onDuty?branch="+t)},this.create=function(t){return e.post("/api/members/",t)},this.update=function(t){return e.put("/api/members/",t.id)},this.updateByMemberId=function(t){return e.put("/api/members/findById/"+t.memberId,t)},this.updateIsChecked=function(t){return e.put("/api/members?id="+t.memberId,t)},this["delete"]=function(t){return e["delete"]("/api/members/"+t.id)}}]),angular.module("InNet").controller("NavCtrl",["$scope","BranchSvc","store","jwtHelper","UserSvc",function(e,t,s,n,r){e.username=r.currentUser(),e.branch=r.userBranch(),t.fetch(r.userCorps()).success(function(t){e.branches=t}),e.isValid=function(e){return r.isValid(e)}}]),angular.module("InNet").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,s){t.otherwise("/login"),e.state("anon",{url:"","abstract":!0,template:"<ui-view>"}).state("anon.login",{url:"/login",templateUrl:"views/login.html",controller:"LoginCtrl"}).state("anon.404",{url:"/404",templateUrl:"views/404.html"}),e.state("dutyDesk",{"abstract":!0,url:"/dutyDesk",templateUrl:"views/common/content.html",data:{requiredLogin:!0,role:["admin"]}}).state("dutyDesk.dashboard",{url:"/dashboard",templateUrl:"views/dashboard.html",controller:"DashboardCtrl",data:{requiredLogin:!0,role:["admin"]}}).state("dutyDesk.case",{url:"/case",templateUrl:"views/case/case.index.html",controller:"CaseCtrl"}).state("dutyDesk.safety",{url:"/case/:id",templateUrl:"views/summary/summary.index.html",controller:"SummaryCtrl"}).state("dutyDesk.dutylist",{"abstract":!0,template:"<ui-view>"}).state("dutyDesk.dutylist.show",{url:"/dutylist/:branch",templateUrl:"views/dutylist/dutylist.index.html",controller:"DutyListCtrl"}).state("dutyDesk.dutylist.edit",{url:"/dutylist/:branch/edit",templateUrl:"views/dutylist/dutylist.edit.html",controller:"DutyListEditCtrl"}).state("dutyDesk.member",{"abstract":!0,template:"<ui-view>"}).state("dutyDesk.member.show",{url:"/member/:branch",templateUrl:"views/member/member.index.html",controller:"MemberCtrl"}).state("dutyDesk.member.edit",{url:"/member/:branch/edit",templateUrl:"views/member/member.edit.html",controller:"MemberEditCtrl"}).state("dutyDesk.logistic",{url:"/logistic",templateUrl:"views/logistic/logistic.index.html",controller:"LogisticCtrl"}),e.state("director",{"abstract":!0,url:"",templateUrl:"views/director/director.content.html",data:{requiredLogin:!0,role:["user"]}}).state("director.safety",{"abstract":!0,url:"/safety",template:"<ui-view>"}).state("director.safety.index",{url:"/index",templateUrl:"views/safety/safety.index.html",controller:"SafetyIndexCtrl"}).state("director.safety.management",{url:"/index/:id",templateUrl:"views/safety/safety.manage.html",controller:"SafetyManageCtrl"}).state("director.safety.summary",{url:"/summary/:id",templateUrl:"views/summary/summary.index.html",controller:"SummaryCtrl"}).state("director.map",{url:"/map",templateUrl:"views/map/map.index.html",controller:"MapIndexCtrl"}).state("director.dutylist",{"abstract":!0,url:"/dutylist",template:"<ui-view>"}).state("director.dutylist.index",{url:"/index",templateUrl:"views/dutylist/director.dutylist.index.html",controller:"DutyListCtrl"}).state("director.dutylist.edit",{url:"/edit",templateUrl:"views/dutylist/director.dutylist.edit.html",controller:"DutyListEditCtrl"})}]).run(["$rootScope","$state","$stateParams","store","jwtHelper","UserSvc","SocketSvc",function(e,t,s,n,r,i,a){e.$on("$stateChangeStart",function(e,s,a,c,o){"anon.login"==s.name?n.remove("jwt"):s.data&&s.data.requiredLogin&&(i.isLoggedIn()?-1==s.data.role.indexOf(r.decodeToken(n.get("jwt")).role)&&(e.preventDefault(),t.go("anon.login")):(e.preventDefault(),t.go("anon.login")))}),e.$on("$stateChangeError",function(e){e.preventDefault()})}]),angular.module("InNet").controller("SafetyIndexCtrl",["$scope","CaseSvc","UserSvc","SocketSvc","$rootScope",function(e,t,s,n,r){n.on("newCase",function(t){e.cases.push(t)}),n.on("caseClose",function(t){t.isOngoing||(e.cases=e.cases.filter(function(e){return e._id!=t.caseId}))}),t.fetchRelativeCase(s.userBranch()).success(function(t){e.cases=t}),e.$on("$destroy",function(e){n.removeAllListeners()}),e.accessLevel=s.accessLevel()}]),angular.module("InNet").controller("SafetyManageCtrl",["$scope","$stateParams","$modal","StSvc","$state","MemberSvc","$log","UserSvc","BranchSvc","SocketSvc",function(e,t,s,n,r,i,a,c,o,u){var l=c.userBranch();o.fetchByName(l).success(function(t){e.details=t}),n.fetch(t.id,l).success(function(t){e.strikeTeams=t}),u.on("newSt",function(s){angular.equals(l,s.branch)&&angular.equals(t.id,s.caseId)&&e.strikeTeams.push(s)}),u.on("updateSt",function(t){for(var s=angular.copy(t.members),n=e.strikeTeams.length-1;n>=0;n--)angular.equals(e.strikeTeams[n]._id,t.id)&&(e.strikeTeams[n].position=t.position,e.strikeTeams[n].area=t.area,e.strikeTeams[n].members.push.apply(e.strikeTeams[n].members,s))}),u.on("dismiss",function(t){var s=t.stId;e.strikeTeams=e.strikeTeams.filter(function(e){return e._id!=s})}),e.strikeTeam=function(){s.open({templateUrl:"views/safety/safety.modal.html",controller:"SafetyModalCtrl",size:"md",resolve:{stId:function(){return _.isEmpty(e.strikeTeams)?0:e.strikeTeams[e.strikeTeams.length-1].id}}})},e.openSettingModal=function(t,n){var r=s.open({templateUrl:"views/safety/safety.setting.modal.html",controller:"SafetySettingCtrl",size:"lg",resolve:{strikeTeam:function(){return t}}});r.result.then(function(t){for(var s=e.strikeTeams.length-1;s>=0;s--)angular.equals(e.strikeTeams[s]._id,t.id)&&(e.strikeTeams[s].position=t.position,e.strikeTeams[s].area=t.area,e.strikeTeams[s].members.push.apply(e.strikeTeams[s].members,t.members))},function(){a.info("Modal dismissed at: "+new Date)})},e.dismiss=function(t,s){n.dismissSt({id:t._id}).success(function(){for(var e=t.members.length-1;e>=0;e--)i.updateIsChecked({memberId:t.members[e]._id,mission:t.members[e].mission,isChecked:!1})}),e.strikeTeams.splice(s,1)},e.$on("$destroy",function(e){u.removeAllListeners()})}]),angular.module("InNet").controller("SafetyModalCtrl",["$scope","$modalInstance","$stateParams","StSvc","MemberSvc","$state","$window","stId","UserSvc","BranchSvc","SocketSvc",function(e,t,s,n,r,i,a,c,o,u,l){var m=o.userBranch();e.title=m+(c+1),u.fetchByName(m).success(function(t){e.details=t}).then(function(){e.details&&(e.details.members=e.details.members.filter(function(e){return 1!=e.isChecked}),e.details.members.forEach(function(e){e.limitTime=moment.duration(e.workingTime,"seconds")}))}),e.strikeTeam={position:"第一面",positions:["第一面","第二面","第三面","第四面"],mission:"搶救小組",missions:["搶救小組","救援小組","搜救小組"],area:"第一區",areas:["第一區","第二區","第三區","第四區","第五區"]},e.check=function(e){e.isChecked=!e.isChecked},e.cancel=function(){t.dismiss("cancel")},e.save=function(){var n=e.details.members.filter(function(e){return e.isChecked===!0});if(n.length>-1){for(var i={id:c+1||0,caseId:s.id,branch:e.details.name,director:e.details.director,position:e.strikeTeam.position,positions:e.strikeTeam.positions,mission:e.strikeTeam.mission,missions:e.strikeTeam.missions,area:e.strikeTeam.area,areas:e.strikeTeam.areas,members:n,isDismissed:!1,workingTime:_.min(n,function(e){return e.workingTime}).workingTime,creator:o.currentUser()},u=n.length-1;u>=0;u--)r.updateIsChecked({memberId:n[u]._id,isChecked:n[u].isChecked,mission:n[u].mission});l.emit("createStrikeTeam",i),t.close()}else a.alert("you must organize strike team")}}]),angular.module("InNet").controller("SafetySettingCtrl",["$scope","strikeTeam","$modalInstance","StSvc","$state","MemberSvc","CaseSvc","$stateParams","SocketSvc",function(e,t,s,n,r,i,a,c,o){var u=[],l=[];e.strikeTeam=t,a.fetchDetails(c.id).success(function(t){e.dispatch=t.branchIds}),e.chooseBranch=function(t){e.members=e.dispatch[t].members;for(var s=e.members.length-1;s>=0;s--)e.members[s].isChecked&&e.members.splice(s,1)},e.cancel=function(){s.dismiss("cancel")},e.check=function(e){e.isChecked=!e.isChecked,u.push(e._id),l.push(e)},e.uncheck=function(e,t){e.isChecked=!e.isChecked,u.splice(t,1),l.splice(t,1)},e.save=function(){n.updateSt({id:t._id,position:t.position,area:t.area,mission:t.mission,memberIds:u}).success(function(){for(var e=u.length-1;e>=0;e--)i.updateIsChecked({memberId:u[e]._id,mission:u[e].mission,isChecked:!0})}),s.close({id:t._id,position:t.position,area:t.area,members:l,caseId:t.caseId})}}]),angular.module("InNet").service("SocketSvc",["$rootScope","store","$q","$timeout",function(e,t,s,n){this.init=function(e){var s=null;return s=e?e:t.get("jwt"),io.connect("http://localhost:3000",{query:"token="+s,forceNew:!0})};var r=this.init();this.on=function(t,s){this.init().on(t,function(){var t=arguments;e.$apply(function(){s.apply(r,t)})})},this.emit=function(t,s,n){this.init().emit(t,s,function(){var t=arguments;e.$apply(function(){n&&n.apply(r,t)})})},this.removeAllListeners=function(t,s){this.init().removeAllListeners(t,function(){var t=arguments;e.$apply(function(){s.apply(r,t)})})}}]),angular.module("InNet").service("StSvc",["$http",function(e){this.fetch=function(t,s){return e.get("/api/strikeTeams?caseId="+t+"&branch="+s)},this.fetchByCase=function(t){return e.get("/api/strikeTeams/total?caseId="+t)},this.dismissSt=function(t){return e.put("/api/strikeTeams/dismiss?id="+t.id)},this.updateSt=function(t){return e.put("/api/strikeTeams/update?id="+t.id,t)},this.updateTimeRecord=function(t){return e.put("/api/strikeTeams/time?id="+t.id,t)},this.create=function(t){return e.post("/api/strikeTeams",t)},this.count=function(t){return e.get("/api/strikeTeams/count?caseId="+t)}}]),angular.module("InNet").controller("SummaryCtrl",["$scope","StSvc","$stateParams","$interval","$state","SocketSvc",function(e,t,s,n,r,i){i.on("timerRunning",function(t){for(var s=e.strikeTeams.length-1;s>=0;s--)angular.equals(e.strikeTeams[s]._id,t.stId)&&(e.strikeTeams[s].timerRunning=t.timerRunning)}),i.on("progressUpdate",function(t){for(var s=e.strikeTeams.length-1;s>=0;s--)angular.equals(e.strikeTeams[s]._id,t.id)&&(e.strikeTeams[s].timer=moment.duration(t.millis),e.strikeTeams[s].progress=t.progress,e.strikeTeams[s].progressState=t.progressState)}),i.on("newSt",function(t){if(angular.equals(a,t.caseId)){var s=angular.copy(t);e.strikeTeams.push(s)}e.deploys=c(e.strikeTeams)}),i.on("updateSt",function(s){t.fetchByCase(a).success(function(t){e.strikeTeams=t,e.strikeTeams.forEach(function(e){e.limitTime=moment.duration(e.workingTime,"seconds")}),e.deploys=c(e.strikeTeams)})}),i.on("dismiss",function(s){t.fetchByCase(a).success(function(t){e.strikeTeams=t,e.deploys=c(e.strikeTeams)})});var a=s.id;t.fetchByCase(a).success(function(t){e.strikeTeams=t,e.strikeTeams.forEach(function(e){e.limitTime=moment.duration(e.workingTime,"seconds")}),e.deploys=c(e.strikeTeams)}),e.position={defaultPos:"第一面",positions:["第一面","第二面","第三面","第四面"]};var c=function(e){var t=_.range(4).map(function(){return _.range(5).map(function(){return{totalMember:0,stTotal:0}})});if(e)for(var s=e.length-1;s>=0;s--){var n=_.indexOf(e[s].positions,e[s].position),r=_.indexOf(e[s].areas,e[s].area);t[n][r].stTotal+=1,t[n][r].totalMember+=e[s].members.length}return t};e.$on("$destroy",function(e){i.removeAllListeners()})}]),angular.module("InNet").controller("TimerCtrl",["$scope","SocketSvc",function(e,t){e.timerRunning=!0,e.startTimer=function(s,n){e.$broadcast("timer-start"),e.timerRunning=!0,t.emit("timer",{stId:s._id,timerRunning:!0})},e.stopTimer=function(s,n){e.$broadcast("timer-stop"),e.timerRunning=!1,t.emit("timer",{stId:s._id,timerRunning:!1})},e.resumeTimer=function(){e.$broadcast("timer-resume"),e.timerRunning=!1}}]),angular.module("InNet").controller("TopNavCtrl",["$scope","$location","$state","$interval","store","SocketSvc","UserSvc","$window",function(e,t,s,n,r,i,a,c){e.currentTime=moment().format("MMM Do, h:mm:ss a"),n(function(){moment.locale("zh-tw"),e.currentTime=moment().format("MMM Do, h:mm:ss a")},1e3),e.logout=function(){a.currentAccount();i.emit("logout"),s.go("anon.login")}}]),angular.module("InNet").service("UserSvc",["$http","store","jwtHelper",function(e,t,s){this.fetchOnlineUser=function(){return e.get("/api/users/userState")},this.register=function(){return e.post("/api/users")},this.login=function(t){return e.post("/api/users/authenticate",t)},this.isLoggedIn=function(){return t.get("jwt")},this.isValid=function(e){return this.isLoggedIn&&(s.decodeToken(t.get("jwt")).accessLevel>1||s.decodeToken(t.get("jwt")).branch==e)?!0:!1},this.userBranch=function(){return this.isLoggedIn?s.decodeToken(t.get("jwt")).branch:void 0},this.userCorps=function(){return this.isLoggedIn?s.decodeToken(t.get("jwt")).corps:void 0},this.currentUser=function(){return this.isLoggedIn?s.decodeToken(t.get("jwt")).username:void 0},this.currentAccount=function(){return this.isLoggedIn?s.decodeToken(t.get("jwt")).account:void 0},this.accessLevel=function(){return this.isLoggedIn?s.decodeToken(t.get("jwt")).accessLevel:void 0},this.caseId=function(){return this.isLoggedIn?s.decodeToken(t.get("jwt")).caseId:void 0}}]);
//# sourceMappingURL=data:application/json;base64,